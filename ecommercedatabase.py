# -*- coding: utf-8 -*-
"""EcommerceDatabase.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ibH7L81RXtadP3ZJHt0j-POnIx7Q9o_8

Ecommerce Database

The goal of the project is to create a relational sample database using Python. Then use SQL Server to update and explore the relational database. Lastly to create a dashboard in Tableau and Excel to explore KPI's
"""

#imports
import pandas as pd
import requests
from bs4 import BeautifulSoup
import random
import string
import numpy as np
import datetime
from datetime import timedelta

#Create tables for the relational database
product = pd.DataFrame(columns = ['sku','name','price','quantity','cogs'])
orders = pd.DataFrame(columns = ['order_id','created_at'])
ordered_items = pd.DataFrame(columns = ['order_id','sku','quantity_ordered'])

#Downloading products and prices from Lego.com for starwars products

URL = "https://www.lego.com/en-us/themes/star-wars"
page = requests.get(URL)
product_name = []
product_price = []
price = []

soup = BeautifulSoup(page.content, "html.parser")
results = soup.find(id="blt4e128e4a78935e4b")
for x in range(1,8):
  URL = "https://www.lego.com/en-us/themes/star-wars?page=" + str(x)
  page = requests.get(URL)
  soup = BeautifulSoup(page.content, "html.parser")
  results = soup.find(id="blt4e128e4a78935e4b")
  Lego_sets = results.find_all("div", class_="ProductLeafSharedstyles__Wrapper-sc-1yg7ucv-0 dWswSG")
  for lego_set in Lego_sets:
    t = lego_set.find("h2", class_="Text__BaseText-sc-13i1y3k-0 iSNFVS ProductLeafSharedstyles__Title-sc-1yg7ucv-9 zimKm")
    n = str(t.find(class_="Markup__StyledMarkup-nc8x20-0 epIXnJ"))
    m=n.split('>')[1].split('<')[0]
    product_name.append(m)

    p = lego_set.find("span", class_="Text__BaseText-sc-13i1y3k-0 eTDhBg ProductPricestyles__StyledText-vmt0i4-0 chARQH")
    if p == None:
      p = lego_set.find("span",class_="Text__BaseText-sc-13i1y3k-0 fOBIfn")
    
    q = str(p).split('$')[1].split('<')[0]
    product_price.append(q)

#Create the product dataframe

#temp list to assign values
prices = []
sku_list = []
cog = []
quantities = []

#convert price string to float - better for analsys in sql and tableau
for i in product_price:
  prices.append(round(float(i),2))

#random string to make up skus
characters = string.ascii_letters + string.digits

for x in range(len(product_name)):
  sku_list.append(''.join(random.choice(characters) for i in range(5)))
  
#calculate the cost of goods sold
for i in prices:
  cog.append(i/2.00)

#assign quantities a normal distribution (how many of each unit in warehouse)
quantities = np.round(np.random.normal(35, 3, len(product_name)), 0)

product = product.assign(quantity = quantities)
product = product.assign(sku = sku_list)
product = product.assign(name = product_name)
product = product.assign(price = prices)
product = product.assign(cogs = cog)

product

#Order Table
orderids = []
#sting for unique order ids
ids = string.digits

for x in range(500):
  orderids.append(''.join(random.choice(ids) for i in range(7)))

orders = orders.assign(order_id = orderids)
#check for duplicates
orders[orders.duplicated(['order_id'],keep=False)]

#Create order dates using datetime functions
date = []
for y in range(500):
  start_date = datetime.date(2021,1,1)
  end_date = datetime.date(2022,1,1)
  rand_date = start_date + (end_date - start_date) * random.random()
  date.append(rand_date)

orders = orders.assign(created_at = date)

orders

#ordered_items table (line items of what each order contains)
ordered_skus = []
quantity_order = []
orderid = []
possible_orders = [1, 2, 3, 4]
value = []
for i in range(1000):
  ordered_skus.append(random.choice(sku_list))
  #assign weights to each number, i.e. most likely only 1 item ordered at a time
  value.append(random.choices(possible_orders, weights=(65, 25, 5, 5,), k=1))
  orderid.append(random.choice(orderids))



ordered_items = ordered_items.assign(sku = ordered_skus)
quantity_order = [int(x[0]) for x in value]
ordered_items = ordered_items.assign(quantity_ordered = quantity_order)
ordered_items = ordered_items.assign(order_id = orderid)

ordered_items

#calculating the order total amount using ordered_items
#group by and merge tables 

temp = product.merge(ordered_items, on='sku')
temp['amount_ordered'] = temp['price'] * temp['quantity_ordered']
temp1 = pd.DataFrame(temp.groupby(['order_id'])['amount_ordered'].agg('sum'))

orders.merge(temp1,on='order_id')

#Download data for SQL Server and Tableau
from google.colab import files
orders.to_csv('orders.csv', encoding = 'utf-8-sig') 
files.download('orders.csv')
ordered_items.to_csv('ordereditems.csv', encoding = 'utf-8-sig') 
files.download('ordereditems.csv')
product.to_csv('product.csv', encoding = 'utf-8-sig') 
files.download('product.csv')